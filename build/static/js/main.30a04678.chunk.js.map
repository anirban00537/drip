{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","componentDidMount","socket","io","path","query","on","success","console","log","sdp","textref","value","JSON","stringify","pc","setRemoteDescription","RTCSessionDescription","candidate","addIceCandidate","RTCIceCandidate","RTCPeerConnection","iceServers","urls","onicecandidate","e","sendToPeer","oniceconnectionstatechange","onaddstream","remoteVideoref","current","srcObject","stream","navigator","mediaDevices","getUserMedia","audio","video","then","window","localStream","localVideoref","addStream","catch","messageType","payload","emit","socketID","id","createOffer","offerToReceiveVideo","setLocalDescription","createAnswer","desc","parse","addCandidate","candidates","forEach","React","createRef","style","width","height","margin","backgroundColor","ref","this","autoPlay","onClick","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.30a04678.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nimport io from \"socket.io-client\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    // https://reactjs.org/docs/refs-and-the-dom.html\n    this.localVideoref = React.createRef();\n    this.remoteVideoref = React.createRef();\n\n    this.socket = null;\n    this.candidates = [];\n  }\n\n  componentDidMount = () => {\n    this.socket = io(\"/webrtcPeer\", {\n      path: \"/webrtc\",\n      query: {},\n    });\n\n    this.socket.on(\"connection-success\", (success) => {\n      console.log(success);\n    });\n\n    this.socket.on(\"offerOrAnswer\", (sdp) => {\n      this.textref.value = JSON.stringify(sdp);\n\n      // set sdp as remote description\n      this.pc.setRemoteDescription(new RTCSessionDescription(sdp));\n    });\n\n    this.socket.on(\"candidate\", (candidate) => {\n      // console.log('From Peer... ', JSON.stringify(candidate))\n      // this.candidates = [...this.candidates, candidate]\n      this.pc.addIceCandidate(new RTCIceCandidate(candidate));\n    });\n\n    // const pc_config = null\n\n    const pc_config = {\n      iceServers: [\n        // {\n        //   urls: 'stun:[STUN_IP]:[PORT]',\n        //   'credentials': '[YOR CREDENTIALS]',\n        //   'username': '[USERNAME]'\n        // },\n        {\n          urls: \"stun:stun.l.google.com:19302\",\n        },\n      ],\n    };\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection\n    // create an instance of RTCPeerConnection\n    this.pc = new RTCPeerConnection(pc_config);\n\n    // triggered when a new candidate is returned\n    this.pc.onicecandidate = (e) => {\n      // send the candidates to the remote peer\n      // see addCandidate below to be triggered on the remote peer\n      if (e.candidate) {\n        // console.log(JSON.stringify(e.candidate))\n        this.sendToPeer(\"candidate\", e.candidate);\n      }\n    };\n\n    // triggered when there is a change in connection state\n    this.pc.oniceconnectionstatechange = (e) => {\n      console.log(e);\n    };\n\n    // triggered when a stream is added to pc, see below - this.pc.addStream(stream)\n    this.pc.onaddstream = (e) => {\n      this.remoteVideoref.current.srcObject = e.stream;\n    };\n\n    // called when getUserMedia() successfully returns - see below\n    // getUserMedia() returns a MediaStream object (https://developer.mozilla.org/en-US/docs/Web/API/MediaStream)\n    const success = (stream) => {\n      window.localStream = stream;\n      this.localVideoref.current.srcObject = stream;\n      this.pc.addStream(stream);\n    };\n\n    // called when getUserMedia() fails - see below\n    const failure = (e) => {\n      console.log(\"getUserMedia Error: \", e);\n    };\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n    // see the above link for more constraint options\n    const constraints = {\n      audio: false,\n      video: true,\n      // video: {\n      //   width: 1280,\n      //   height: 720\n      // },\n      // video: {\n      //   width: { min: 1280 },\n      // }\n    };\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n    navigator.mediaDevices\n      .getUserMedia(constraints)\n      .then(success)\n      .catch(failure);\n  };\n\n  sendToPeer = (messageType, payload) => {\n    this.socket.emit(messageType, {\n      socketID: this.socket.id,\n      payload,\n    });\n  };\n\n  /* ACTION METHODS FROM THE BUTTONS ON SCREEN */\n\n  createOffer = () => {\n    console.log(\"Offer\");\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createOffer\n    // initiates the creation of SDP\n    this.pc.createOffer({ offerToReceiveVideo: 1 }).then((sdp) => {\n      // console.log(JSON.stringify(sdp))\n\n      // set offer sdp as local description\n      this.pc.setLocalDescription(sdp);\n\n      this.sendToPeer(\"offerOrAnswer\", sdp);\n    });\n  };\n\n  // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createAnswer\n  // creates an SDP answer to an offer received from remote peer\n  createAnswer = () => {\n    console.log(\"Answer\");\n    this.pc.createAnswer({ offerToReceiveVideo: 1 }).then((sdp) => {\n      // console.log(JSON.stringify(sdp))\n\n      // set answer sdp as local description\n      this.pc.setLocalDescription(sdp);\n\n      this.sendToPeer(\"offerOrAnswer\", sdp);\n    });\n  };\n\n  setRemoteDescription = () => {\n    // retrieve and parse the SDP copied from the remote peer\n    const desc = JSON.parse(this.textref.value);\n\n    // set sdp as remote description\n    this.pc.setRemoteDescription(new RTCSessionDescription(desc));\n  };\n\n  addCandidate = () => {\n    // retrieve and parse the Candidate copied from the remote peer\n    // const candidate = JSON.parse(this.textref.value)\n    // console.log('Adding candidate:', candidate)\n\n    // add the candidate to the peer connection\n    // this.pc.addIceCandidate(new RTCIceCandidate(candidate))\n\n    this.candidates.forEach((candidate) => {\n      console.log(JSON.stringify(candidate));\n      this.pc.addIceCandidate(new RTCIceCandidate(candidate));\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <video\n          style={{\n            width: 240,\n            height: 240,\n            margin: 5,\n            backgroundColor: \"black\",\n          }}\n          ref={this.localVideoref}\n          autoPlay\n        ></video>\n        <video\n          style={{\n            width: 240,\n            height: 240,\n            margin: 5,\n            backgroundColor: \"black\",\n          }}\n          ref={this.remoteVideoref}\n          autoPlay\n        ></video>\n        <br />\n\n        <button onClick={this.createOffer}>Offer</button>\n        <button onClick={this.createAnswer}>Answer</button>\n\n        <br />\n        <textarea\n          style={{ width: 450, height: 40 }}\n          ref={(ref) => {\n            this.textref = ref;\n          }}\n        />\n\n        {/* <br />\n        <button onClick={this.setRemoteDescription}>Set Remote Desc</button>\n        <button onClick={this.addCandidate}>Add Candidate</button> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}