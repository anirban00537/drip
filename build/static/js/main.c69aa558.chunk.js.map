{"version":3,"sources":["components/video.js","components/videos.js","App.js","reportWebVitals.js","index.js"],"names":["Video","props","state","this","videoStream","video","srcObject","nextProps","console","log","style","frameStyle","id","muted","autoPlay","videoStyles","ref","Component","Videos","rVideos","remoteStreams","_rVideos","map","rVideo","index","stream","width","float","padding","cursor","objectFit","borderRadius","name","onClick","switchVideo","display","setState","zIndex","position","backgroundColor","maxHeight","top","right","left","bottom","overflowX","whiteSpace","App","getLocalStream","navigator","mediaDevices","getUserMedia","options","mirror","then","window","localStream","whoisOnline","catch","e","sendToPeer","local","socket","messageType","payload","socketID","emit","createPeerConnection","callback","pc","RTCPeerConnection","pc_config","peerConnections","onicecandidate","candidate","remote","oniceconnectionstatechange","ontrack","remoteVideo","streams","prevState","remoteStream","length","selectedVideo","filter","close","addStream","componentDidMount","io","connect","serviceIP","path","query","on","data","success","status","peerCount","createOffer","sdpConstraints","sdp","setLocalDescription","setRemoteDescription","RTCSessionDescription","createAnswer","addIceCandidate","RTCIceCandidate","_video","iceServers","urls","mandatory","OfferToReceiveAudio","OfferToReceiveVideo","statusText","color","height","margin","minWidth","minHeight","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c69aa558.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Video extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.props.videoStream) {\r\n      this.video.srcObject = this.props.videoStream;\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    console.log(nextProps.videoStream);\r\n\r\n    if (\r\n      nextProps.videoStream &&\r\n      nextProps.videoStream !== this.props.videoStream\r\n    ) {\r\n      this.video.srcObject = nextProps.videoStream;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div style={{ ...this.props.frameStyle }}>\r\n        <video\r\n          id={this.props.id}\r\n          muted={this.props.muted}\r\n          autoPlay\r\n          style={{ ...this.props.videoStyles }}\r\n          // ref={ this.props.videoRef }\r\n          ref={(ref) => {\r\n            this.video = ref;\r\n          }}\r\n        ></video>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Video;\r\n","import React, { Component } from \"react\";\r\nimport Video from \"./video\";\r\n\r\nclass Videos extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      rVideos: [],\r\n      remoteStreams: [],\r\n    };\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (this.props.remoteStreams !== nextProps.remoteStreams) {\r\n      let _rVideos = nextProps.remoteStreams.map((rVideo, index) => {\r\n        let video = (\r\n          <Video\r\n            videoStream={rVideo.stream}\r\n            frameStyle={{ width: 120, float: \"left\", padding: \"0 3px\" }}\r\n            videoStyles={{\r\n              cursor: \"pointer\",\r\n              objectFit: \"cover\",\r\n              borderRadius: 3,\r\n              width: \"100%\",\r\n            }}\r\n          />\r\n        );\r\n\r\n        return (\r\n          <div\r\n            id={rVideo.name}\r\n            onClick={() => this.props.switchVideo(rVideo)}\r\n            style={{ display: \"inline-block\" }}\r\n            key={index}\r\n          >\r\n            {video}\r\n          </div>\r\n        );\r\n      });\r\n\r\n      this.setState({\r\n        remoteStreams: nextProps.remoteStreams,\r\n        rVideos: _rVideos,\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        style={{\r\n          zIndex: 3,\r\n          position: \"fixed\",\r\n          padding: \"6px 3px\",\r\n          backgroundColor: \"rgba(0,0,0,0.3)\",\r\n          maxHeight: 120,\r\n          top: \"auto\",\r\n          right: 10,\r\n          left: 10,\r\n          bottom: 10,\r\n          overflowX: \"scroll\",\r\n          whiteSpace: \"nowrap\",\r\n        }}\r\n      >\r\n        {this.state.rVideos}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Videos;\r\n","import React, { Component } from \"react\";\n\nimport io from \"socket.io-client\";\n\nimport Video from \"./components/video\";\nimport Videos from \"./components/videos\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      localStream: null, // used to hold local stream object to avoid recreating the stream everytime a new offer comes\n      remoteStream: null, // used to hold remote stream object that is displayed in the main screen\n\n      remoteStreams: [], // holds all Video Streams (all remote streams)\n      peerConnections: {}, // holds all Peer Connections\n      selectedVideo: null,\n\n      status: \"Please wait...\",\n\n      pc_config: {\n        iceServers: [\n          {\n            urls: \"stun:stun.l.google.com:19302\",\n          },\n        ],\n      },\n\n      sdpConstraints: {\n        mandatory: {\n          OfferToReceiveAudio: true,\n          OfferToReceiveVideo: true,\n        },\n      },\n    };\n\n    // DONT FORGET TO CHANGE TO YOUR URL\n\n    this.serviceIP = \"https://dripconference.herokuapp.com/webrtcPeer\";\n\n    // https://reactjs.org/docs/refs-and-the-dom.html\n    // this.localVideoref = React.createRef()\n    // this.remoteVideoref = React.createRef()\n\n    this.socket = null;\n    // this.candidates = []\n  }\n\n  getLocalStream = () => {\n    // called when getUserMedia() successfully returns - see below\n    // getUserMedia() returns a MediaStream object (https://developer.mozilla.org/en-US/docs/Web/API/MediaStream)\n    const success = (stream) => {\n      window.localStream = stream;\n      // this.localVideoref.current.srcObject = stream\n      // this.pc.addStream(stream);\n      this.setState({\n        localStream: stream,\n      });\n\n      this.whoisOnline();\n    };\n\n    // called when getUserMedia() fails - see below\n    const failure = (e) => {\n      console.log(\"getUserMedia Error: \", e);\n    };\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n    // see the above link for more constraint options\n    const constraints = {\n      // audio: true,\n      video: true,\n      // video: {\n      //   width: 1280,\n      //   height: 720\n      // },\n      // video: {\n      //   width: { min: 1280 },\n      // }\n      options: {\n        mirror: true,\n      },\n    };\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n    navigator.mediaDevices\n      .getUserMedia(constraints)\n      .then(success)\n      .catch(failure);\n  };\n\n  whoisOnline = () => {\n    // let all peers know I am joining\n    this.sendToPeer(\"onlinePeers\", null, { local: this.socket.id });\n  };\n\n  sendToPeer = (messageType, payload, socketID) => {\n    this.socket.emit(messageType, {\n      socketID,\n      payload,\n    });\n  };\n\n  createPeerConnection = (socketID, callback) => {\n    try {\n      let pc = new RTCPeerConnection(this.state.pc_config);\n\n      // add pc to peerConnections object\n      const peerConnections = { ...this.state.peerConnections, [socketID]: pc };\n      this.setState({\n        peerConnections,\n      });\n\n      pc.onicecandidate = (e) => {\n        if (e.candidate) {\n          this.sendToPeer(\"candidate\", e.candidate, {\n            local: this.socket.id,\n            remote: socketID,\n          });\n        }\n      };\n\n      pc.oniceconnectionstatechange = (e) => {\n        // if (pc.iceConnectionState === 'disconnected') {\n        //   const remoteStreams = this.state.remoteStreams.filter(stream => stream.id !== socketID)\n        //   this.setState({\n        //     remoteStream: remoteStreams.length > 0 && remoteStreams[0].stream || null,\n        //   })\n        // }\n      };\n\n      pc.ontrack = (e) => {\n        const remoteVideo = {\n          id: socketID,\n          name: socketID,\n          stream: e.streams[0],\n        };\n\n        this.setState((prevState) => {\n          // If we already have a stream in display let it stay the same, otherwise use the latest stream\n          const remoteStream =\n            prevState.remoteStreams.length > 0\n              ? {}\n              : { remoteStream: e.streams[0] };\n\n          // get currently selected video\n          let selectedVideo = prevState.remoteStreams.filter(\n            (stream) => stream.id === prevState.selectedVideo.id\n          );\n          // if the video is still in the list, then do nothing, otherwise set to new video stream\n          selectedVideo = selectedVideo.length\n            ? {}\n            : { selectedVideo: remoteVideo };\n\n          return {\n            // selectedVideo: remoteVideo,\n            ...selectedVideo,\n            // remoteStream: e.streams[0],\n            ...remoteStream,\n            remoteStreams: [...prevState.remoteStreams, remoteVideo],\n          };\n        });\n      };\n\n      pc.close = () => {\n        // alert('GONE')\n      };\n\n      if (this.state.localStream) pc.addStream(this.state.localStream);\n\n      // return pc\n      callback(pc);\n    } catch (e) {\n      console.log(\"Something went wrong! pc not created!!\", e);\n      // return;\n      callback(null);\n    }\n  };\n\n  componentDidMount = () => {\n    this.socket = io.connect(this.serviceIP, {\n      path: \"/io/webrtc\",\n      query: {},\n    });\n\n    this.socket.on(\"connection-success\", (data) => {\n      this.getLocalStream();\n\n      console.log(data.success);\n      const status =\n        data.peerCount > 1\n          ? `Total Connected Peers: ${data.peerCount}`\n          : \"Waiting for other peers to connect\";\n\n      this.setState({\n        status: status,\n      });\n    });\n\n    this.socket.on(\"peer-disconnected\", (data) => {\n      console.log(\"peer-disconnected\", data);\n\n      const remoteStreams = this.state.remoteStreams.filter(\n        (stream) => stream.id !== data.socketID\n      );\n\n      this.setState((prevState) => {\n        // check if disconnected peer is the selected video and if there still connected peers, then select the first\n        const selectedVideo =\n          prevState.selectedVideo.id === data.socketID && remoteStreams.length\n            ? { selectedVideo: remoteStreams[0] }\n            : null;\n\n        return {\n          // remoteStream: remoteStreams.length > 0 && remoteStreams[0].stream || null,\n          remoteStreams,\n          ...selectedVideo,\n        };\n      });\n    });\n\n    // this.socket.on('offerOrAnswer', (sdp) => {\n\n    //   this.textref.value = JSON.stringify(sdp)\n\n    //   // set sdp as remote description\n    //   this.pc.setRemoteDescription(new RTCSessionDescription(sdp))\n    // })\n\n    this.socket.on(\"online-peer\", (socketID) => {\n      console.log(\"connected peers ...\", socketID);\n\n      // create and send offer to the peer (data.socketID)\n      // 1. Create new pc\n      this.createPeerConnection(socketID, (pc) => {\n        // 2. Create Offer\n        if (pc)\n          pc.createOffer(this.state.sdpConstraints).then((sdp) => {\n            pc.setLocalDescription(sdp);\n\n            this.sendToPeer(\"offer\", sdp, {\n              local: this.socket.id,\n              remote: socketID,\n            });\n          });\n      });\n    });\n\n    this.socket.on(\"offer\", (data) => {\n      this.createPeerConnection(data.socketID, (pc) => {\n        pc.addStream(this.state.localStream);\n\n        pc.setRemoteDescription(new RTCSessionDescription(data.sdp)).then(\n          () => {\n            // 2. Create Answer\n            pc.createAnswer(this.state.sdpConstraints).then((sdp) => {\n              pc.setLocalDescription(sdp);\n\n              this.sendToPeer(\"answer\", sdp, {\n                local: this.socket.id,\n                remote: data.socketID,\n              });\n            });\n          }\n        );\n      });\n    });\n\n    this.socket.on(\"answer\", (data) => {\n      // get remote's peerConnection\n      const pc = this.state.peerConnections[data.socketID];\n      console.log(data.sdp);\n      pc.setRemoteDescription(\n        new RTCSessionDescription(data.sdp)\n      ).then(() => {});\n    });\n\n    this.socket.on(\"candidate\", (data) => {\n      // get remote's peerConnection\n      const pc = this.state.peerConnections[data.socketID];\n\n      if (pc) pc.addIceCandidate(new RTCIceCandidate(data.candidate));\n    });\n\n    // const pc_config = null\n\n    // const pc_config = {\n    //   \"iceServers\": [\n    //     // {\n    //     //   urls: 'stun:[STUN_IP]:[PORT]',\n    //     //   'credentials': '[YOR CREDENTIALS]',\n    //     //   'username': '[USERNAME]'\n    //     // },\n    //     {\n    //       urls : 'stun:stun.l.google.com:19302'\n    //     }\n    //   ]\n    // }\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection\n    // create an instance of RTCPeerConnection\n    // this.pc = new RTCPeerConnection(this.state.pc_config)\n\n    // triggered when a new candidate is returned\n    // this.pc.onicecandidate = (e) => {\n    //   // send the candidates to the remote peer\n    //   // see addCandidate below to be triggered on the remote peer\n    //   if (e.candidate) {\n    //     // console.log(JSON.stringify(e.candidate))\n    //     this.sendToPeer('candidate', e.candidate)\n    //   }\n    // }\n\n    // triggered when there is a change in connection state\n    // this.pc.oniceconnectionstatechange = (e) => {\n    //   console.log(e)\n    // }\n\n    // triggered when a stream is added to pc, see below - this.pc.addStream(stream)\n    // this.pc.onaddstream = (e) => {\n    //   this.remoteVideoref.current.srcObject = e.stream\n    // }\n\n    // this.pc.ontrack = (e) => {\n    //   debugger\n    //   // this.remoteVideoref.current.srcObject = e.streams[0]\n\n    //   this.setState({\n    //     remoteStream: e.streams[0]\n    //   })\n    // }\n  };\n\n  switchVideo = (_video) => {\n    console.log(_video);\n    this.setState({\n      selectedVideo: _video,\n    });\n  };\n\n  render() {\n    console.log(this.state.localStream);\n\n    const statusText = (\n      <div style={{ color: \"yellow\", padding: 5 }}>{this.state.status}</div>\n    );\n\n    return (\n      <div>\n        <Video\n          videoStyles={{\n            zIndex: 2,\n            position: \"absolute\",\n            right: 0,\n            width: 200,\n            height: 200,\n            margin: 5,\n            backgroundColor: \"black\",\n          }}\n          // ref={this.localVideoref}\n          videoStream={this.state.localStream}\n          autoPlay\n          muted\n        ></Video>\n        <Video\n          videoStyles={{\n            zIndex: 1,\n            position: \"fixed\",\n            bottom: 0,\n            minWidth: \"100%\",\n            minHeight: \"100%\",\n            backgroundColor: \"black\",\n          }}\n          // ref={ this.remoteVideoref }\n          videoStream={\n            this.state.selectedVideo && this.state.selectedVideo.stream\n          }\n          autoPlay\n        ></Video>\n        <br />\n        <div\n          style={{\n            zIndex: 3,\n            position: \"absolute\",\n            margin: 10,\n            backgroundColor: \"#cdc4ff4f\",\n            padding: 10,\n            borderRadius: 5,\n          }}\n        >\n          {statusText}\n        </div>\n        <div>\n          <Videos\n            switchVideo={this.switchVideo}\n            remoteStreams={this.state.remoteStreams}\n          ></Videos>\n        </div>\n        <br />\n\n        {/* <div style={{zIndex: 1, position: 'fixed'}} >\n          <button onClick={this.createOffer}>Offer</button>\n          <button onClick={this.createAnswer}>Answer</button>\n\n          <br />\n          <textarea style={{ width: 450, height:40 }} ref={ref => { this.textref = ref }} />\n        </div> */}\n        {/* <br />\n        <button onClick={this.setRemoteDescription}>Set Remote Desc</button>\n        <button onClick={this.addCandidate}>Add Candidate</button> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}